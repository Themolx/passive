{"ast":null,"code":"var _jsxFileName = \"/Users/martintomek/passive/src/pages/BlogPost.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport DownloadButton from '../components/blog/DownloadButton';\nimport BlogContent from '../components/blog/BlogContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BlogPost() {\n  _s();\n  const {\n    slug\n  } = useParams();\n  const blogPosts = {\n    'nuke-advanced-grab-tool': {\n      title: \"🚀 How I Built the Nuke Grab Tool (Without Being a Coding Expert)\",\n      date: \"November 9, 2024\",\n      author: \"Martin Tomek\",\n      tags: [\"Nuke\", \"Python\", \"Workflow\", \"Technical Guide\"],\n      content: [{\n        type: 'personal-intro',\n        content: \"You know that feeling when you're working in Nuke, and you keep thinking 'there has to be a better way'? That's exactly how this story begins. After spending countless hours in Blender's node editor and falling in love with its grab tool, I couldn't shake the thought: 'Why can't we have this in Nuke?'\"\n      }, {\n        type: 'journey-start',\n        content: {\n          title: \"The 'Aha!' Moment 💡\",\n          text: \"I'm not a professional programmer - far from it. But one night, frustrated with moving nodes around in Nuke, I decided to try something different. I'd heard about this AI called Claude that was pretty good with Nuke's Python API. So I thought, 'What's the worst that could happen?'\"\n        }\n      }, {\n        type: 'dialogue-section',\n        content: {\n          title: \"The Late Night Conversation That Started It All 🌙\",\n          conversation: [{\n            me: \"Hey Claude, you know what drives me crazy in Nuke? Having to precisely hover over nodes just to move them. In Blender, I just hit a key, grab the nodes wherever my cursor is, move them around, and hit the key again to drop them. Could we make something like that?\",\n            claude: \"That's a great idea! We can use PySide2 to capture the 'E' key press and create a modal grab state. When activated, we'll store the node positions and update them based on cursor movement, regardless of where you initially clicked. Want to try building it?\",\n            result: \"20 minutes and several coffee sips later, we had a working prototype. The nodes were moving smoothly, just like in Blender! 🎉\"\n          }]\n        }\n      }, {\n        type: 'development-timeline',\n        content: {\n          title: \"The Evolution 📈\",\n          stages: [{\n            date: \"October 2\",\n            title: \"The Birth\",\n            description: \"First working version - basic but functional. I couldn't believe how quick it was!\"\n          }, {\n            date: \"October 3\",\n            title: \"Growing Pains\",\n            description: \"Fixed scaling issues and made it work smoothly at different zoom levels (thanks to more chats with Claude)\"\n          }, {\n            date: \"October 6\",\n            title: \"The Game Changer\",\n            description: \"Added Ctrl+Z support (because we all make mistakes!) and middle-click freeze\"\n          }]\n        }\n      }, {\n        type: 'github-journey',\n        content: {\n          title: \"Discovering GitHub 🌟\",\n          text: \"As I created more scripts for production, I realized I needed a better way to manage them. GitHub wasn't just for 'real programmers' - it became my digital toolbox, helping me track changes and share with others.\"\n        }\n      }, {\n        type: 'encouragement',\n        content: {\n          title: \"Here's the Thing...\",\n          message: \"If you're sitting there thinking 'I wish Nuke could do X' but you're not a coder - that's exactly where I was! With tools like Claude AI and a bit of curiosity, you might be surprised how quickly you can turn your ideas into reality.\",\n          tips: [\"Start with a clear idea of what you want\", \"Break it down into simple steps\", \"Use Claude AI to help with the code\", \"Test in Nuke's Script Editor\", \"Don't be afraid to make mistakes\"]\n        }\n      }, {\n        type: 'try-it',\n        content: {\n          title: \"Want to Try the Tool? 🎮\",\n          links: [{\n            text: \"Get it on Nukepedia\",\n            url: \"https://www.nukepedia.com/python/nodegraph/nuke-grab-tool\",\n            description: \"Ready to use version\"\n          }, {\n            text: \"Check it out on GitHub\",\n            url: \"https://github.com/Themolx/NukeScripts\",\n            description: \"See how it evolved (and maybe contribute!)\"\n          }]\n        }\n      }, {\n        type: 'closing-thoughts',\n        content: \"Remember: Every tool starts with someone thinking 'I wish this existed.' Sometimes that someone is you. So what tool do you wish existed? Maybe it's time to start building! 🛠️\"\n      }]\n    }\n  };\n  const post = blogPosts[slug];\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Post not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-4xl mx-auto px-4 py-24\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-purple-400 mb-2\",\n        children: post.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl font-bold mb-4\",\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-4 text-gray-400\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"By \", post.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-2\",\n          children: post.tags.map(tag => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"px-3 py-1 bg-white/10 rounded-full text-sm\",\n            children: tag\n          }, tag, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-8\",\n      children: post.content.map((section, index) => /*#__PURE__*/_jsxDEV(BlogContent, {\n        content: section\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(BlogPost, \"DpOdpe+T7d3Ytb7f6neHj0L13w0=\", false, function () {\n  return [useParams];\n});\n_c = BlogPost;\nexport default BlogPost;\nvar _c;\n$RefreshReg$(_c, \"BlogPost\");","map":{"version":3,"names":["React","useParams","motion","DownloadButton","BlogContent","jsxDEV","_jsxDEV","BlogPost","_s","slug","blogPosts","title","date","author","tags","content","type","text","conversation","me","claude","result","stages","description","message","tips","links","url","post","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","tag","section","index","_c","$RefreshReg$"],"sources":["/Users/martintomek/passive/src/pages/BlogPost.js"],"sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport DownloadButton from '../components/blog/DownloadButton';\nimport BlogContent from '../components/blog/BlogContent';\n\nfunction BlogPost() {\n  const { slug } = useParams();\n\n  const blogPosts = {\n    'nuke-advanced-grab-tool': {\n      title: \"🚀 How I Built the Nuke Grab Tool (Without Being a Coding Expert)\",\n      date: \"November 9, 2024\",\n      author: \"Martin Tomek\",\n      tags: [\"Nuke\", \"Python\", \"Workflow\", \"Technical Guide\"],\n      content: [\n        {\n          type: 'personal-intro',\n          content: \"You know that feeling when you're working in Nuke, and you keep thinking 'there has to be a better way'? That's exactly how this story begins. After spending countless hours in Blender's node editor and falling in love with its grab tool, I couldn't shake the thought: 'Why can't we have this in Nuke?'\"\n        },\n        {\n          type: 'journey-start',\n          content: {\n            title: \"The 'Aha!' Moment 💡\",\n            text: \"I'm not a professional programmer - far from it. But one night, frustrated with moving nodes around in Nuke, I decided to try something different. I'd heard about this AI called Claude that was pretty good with Nuke's Python API. So I thought, 'What's the worst that could happen?'\"\n          }\n        },\n        {\n          type: 'dialogue-section',\n          content: {\n            title: \"The Late Night Conversation That Started It All 🌙\",\n            conversation: [\n              {\n                me: \"Hey Claude, you know what drives me crazy in Nuke? Having to precisely hover over nodes just to move them. In Blender, I just hit a key, grab the nodes wherever my cursor is, move them around, and hit the key again to drop them. Could we make something like that?\",\n                claude: \"That's a great idea! We can use PySide2 to capture the 'E' key press and create a modal grab state. When activated, we'll store the node positions and update them based on cursor movement, regardless of where you initially clicked. Want to try building it?\",\n                result: \"20 minutes and several coffee sips later, we had a working prototype. The nodes were moving smoothly, just like in Blender! 🎉\"\n              }\n            ]\n          }\n        },\n        {\n          type: 'development-timeline',\n          content: {\n            title: \"The Evolution 📈\",\n            stages: [\n              {\n                date: \"October 2\",\n                title: \"The Birth\",\n                description: \"First working version - basic but functional. I couldn't believe how quick it was!\"\n              },\n              {\n                date: \"October 3\",\n                title: \"Growing Pains\",\n                description: \"Fixed scaling issues and made it work smoothly at different zoom levels (thanks to more chats with Claude)\"\n              },\n              {\n                date: \"October 6\",\n                title: \"The Game Changer\",\n                description: \"Added Ctrl+Z support (because we all make mistakes!) and middle-click freeze\"\n              }\n            ]\n          }\n        },\n        {\n          type: 'github-journey',\n          content: {\n            title: \"Discovering GitHub 🌟\",\n            text: \"As I created more scripts for production, I realized I needed a better way to manage them. GitHub wasn't just for 'real programmers' - it became my digital toolbox, helping me track changes and share with others.\"\n          }\n        },\n        {\n          type: 'encouragement',\n          content: {\n            title: \"Here's the Thing...\",\n            message: \"If you're sitting there thinking 'I wish Nuke could do X' but you're not a coder - that's exactly where I was! With tools like Claude AI and a bit of curiosity, you might be surprised how quickly you can turn your ideas into reality.\",\n            tips: [\n              \"Start with a clear idea of what you want\",\n              \"Break it down into simple steps\",\n              \"Use Claude AI to help with the code\",\n              \"Test in Nuke's Script Editor\",\n              \"Don't be afraid to make mistakes\"\n            ]\n          }\n        },\n        {\n          type: 'try-it',\n          content: {\n            title: \"Want to Try the Tool? 🎮\",\n            links: [\n              {\n                text: \"Get it on Nukepedia\",\n                url: \"https://www.nukepedia.com/python/nodegraph/nuke-grab-tool\",\n                description: \"Ready to use version\"\n              },\n              {\n                text: \"Check it out on GitHub\",\n                url: \"https://github.com/Themolx/NukeScripts\",\n                description: \"See how it evolved (and maybe contribute!)\"\n              }\n            ]\n          }\n        },\n        {\n          type: 'closing-thoughts',\n          content: \"Remember: Every tool starts with someone thinking 'I wish this existed.' Sometimes that someone is you. So what tool do you wish existed? Maybe it's time to start building! 🛠️\"\n        }\n      ]\n    }\n  };\n\n  const post = blogPosts[slug];\n\n  if (!post) {\n    return <div>Post not found</div>;\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 py-24\">\n      {/* Header */}\n      <div className=\"mb-12\">\n        <div className=\"text-purple-400 mb-2\">{post.date}</div>\n        <h1 className=\"text-4xl font-bold mb-4\">{post.title}</h1>\n        <div className=\"flex items-center gap-4 text-gray-400\">\n          <span>By {post.author}</span>\n          <div className=\"flex gap-2\">\n            {post.tags.map(tag => (\n              <span key={tag} className=\"px-3 py-1 bg-white/10 rounded-full text-sm\">\n                {tag}\n              </span>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"space-y-8\">\n        {post.content.map((section, index) => (\n          <BlogContent key={index} content={section} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default BlogPost; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}