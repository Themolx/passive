{"ast":null,"code":"export const blogPosts = {\n  'nuke-grab-tool': {\n    slug: 'nuke-grab-tool',\n    title: \"ðŸš€ How I Built the Nuke Grab Tool (Without Being a Coding Expert)\",\n    date: \"November 9, 2024\",\n    author: \"Martin Tomek\",\n    tags: [\"Nuke\", \"Python\", \"Workflow\", \"Technical Guide\"],\n    content: [{\n      type: 'personal-intro',\n      content: \"Have you ever used Blender's node editor and thought 'Why can't Nuke work like this?' That's exactly what happened to me. I loved how Blender lets you grab nodes without precisely hovering over them - just press a key, move them, and press again to release. It saves so many clicks!\"\n    }\n    // Add more content sections as needed\n    ]\n  },\n  'pfx-scripts': {\n    slug: 'pfx-scripts',\n    title: \"ðŸ›  PFX Scripts: Building a Nuke Artist's Toolkit with AI\",\n    date: \"March 28, 2024\",\n    author: \"Martin Tomek\",\n    tags: [\"Nuke\", \"Python\", \"Automation\", \"AI\"],\n    content: [{\n      type: 'intro',\n      content: \"Every VFX artist has their own way of working in Nuke. Over time, I found myself repeating certain tasks - organizing light passes, setting up denoise compositions, managing render loads. Instead of accepting these repetitive tasks, I decided to automate them.\"\n    }, {\n      type: 'section',\n      title: \"The Tools\",\n      content: [{\n        title: \"Auto Light Setup\",\n        description: \"Automatically organizes and sets up light passes with proper naming conventions and merge operations\",\n        code: \"# Example code snippet\\ndef setupLightPasses():\\n    # Tool implementation\"\n      }, {\n        title: \"Denoise Manager\",\n        description: \"Intelligent denoise setup that analyzes input plates and suggests optimal settings\",\n        code: \"# Denoise configuration\\ndef configureDenoiser():\\n    # Implementation details\"\n      }, {\n        title: \"Render Load Balancer\",\n        description: \"Distributes render tasks efficiently across available resources\",\n        code: \"# Load balancing logic\\ndef balanceRenderLoad():\\n    # Distribution algorithm\"\n      }]\n    }]\n  }\n};","map":{"version":3,"names":["blogPosts","slug","title","date","author","tags","content","type","description","code"],"sources":["/Users/martintomek/passive/src/data/blogPosts.js"],"sourcesContent":["export const blogPosts = {\n  'nuke-grab-tool': {\n    slug: 'nuke-grab-tool',\n    title: \"ðŸš€ How I Built the Nuke Grab Tool (Without Being a Coding Expert)\",\n    date: \"November 9, 2024\",\n    author: \"Martin Tomek\",\n    tags: [\"Nuke\", \"Python\", \"Workflow\", \"Technical Guide\"],\n    content: [\n      {\n        type: 'personal-intro',\n        content: \"Have you ever used Blender's node editor and thought 'Why can't Nuke work like this?' That's exactly what happened to me. I loved how Blender lets you grab nodes without precisely hovering over them - just press a key, move them, and press again to release. It saves so many clicks!\"\n      },\n      // Add more content sections as needed\n    ]\n  },\n  'pfx-scripts': {\n    slug: 'pfx-scripts',\n    title: \"ðŸ›  PFX Scripts: Building a Nuke Artist's Toolkit with AI\",\n    date: \"March 28, 2024\",\n    author: \"Martin Tomek\",\n    tags: [\"Nuke\", \"Python\", \"Automation\", \"AI\"],\n    content: [\n      {\n        type: 'intro',\n        content: \"Every VFX artist has their own way of working in Nuke. Over time, I found myself repeating certain tasks - organizing light passes, setting up denoise compositions, managing render loads. Instead of accepting these repetitive tasks, I decided to automate them.\"\n      },\n      {\n        type: 'section',\n        title: \"The Tools\",\n        content: [\n          {\n            title: \"Auto Light Setup\",\n            description: \"Automatically organizes and sets up light passes with proper naming conventions and merge operations\",\n            code: \"# Example code snippet\\ndef setupLightPasses():\\n    # Tool implementation\"\n          },\n          {\n            title: \"Denoise Manager\",\n            description: \"Intelligent denoise setup that analyzes input plates and suggests optimal settings\",\n            code: \"# Denoise configuration\\ndef configureDenoiser():\\n    # Implementation details\"\n          },\n          {\n            title: \"Render Load Balancer\",\n            description: \"Distributes render tasks efficiently across available resources\",\n            code: \"# Load balancing logic\\ndef balanceRenderLoad():\\n    # Distribution algorithm\"\n          }\n        ]\n      }\n    ]\n  }\n}; "],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG;EACvB,gBAAgB,EAAE;IAChBC,IAAI,EAAE,gBAAgB;IACtBC,KAAK,EAAE,mEAAmE;IAC1EC,IAAI,EAAE,kBAAkB;IACxBC,MAAM,EAAE,cAAc;IACtBC,IAAI,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,iBAAiB,CAAC;IACvDC,OAAO,EAAE,CACP;MACEC,IAAI,EAAE,gBAAgB;MACtBD,OAAO,EAAE;IACX;IACA;IAAA;EAEJ,CAAC;EACD,aAAa,EAAE;IACbL,IAAI,EAAE,aAAa;IACnBC,KAAK,EAAE,0DAA0D;IACjEC,IAAI,EAAE,gBAAgB;IACtBC,MAAM,EAAE,cAAc;IACtBC,IAAI,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,CAAC;IAC5CC,OAAO,EAAE,CACP;MACEC,IAAI,EAAE,OAAO;MACbD,OAAO,EAAE;IACX,CAAC,EACD;MACEC,IAAI,EAAE,SAAS;MACfL,KAAK,EAAE,WAAW;MAClBI,OAAO,EAAE,CACP;QACEJ,KAAK,EAAE,kBAAkB;QACzBM,WAAW,EAAE,sGAAsG;QACnHC,IAAI,EAAE;MACR,CAAC,EACD;QACEP,KAAK,EAAE,iBAAiB;QACxBM,WAAW,EAAE,oFAAoF;QACjGC,IAAI,EAAE;MACR,CAAC,EACD;QACEP,KAAK,EAAE,sBAAsB;QAC7BM,WAAW,EAAE,iEAAiE;QAC9EC,IAAI,EAAE;MACR,CAAC;IAEL,CAAC;EAEL;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}