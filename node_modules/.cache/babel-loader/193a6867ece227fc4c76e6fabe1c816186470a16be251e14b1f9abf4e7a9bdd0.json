{"ast":null,"code":"export const aeCustomPanelPost = {\n  slug: 'ae-custom-panel',\n  title: \"ðŸŽ¨ Creating a Smart After Effects Panel (With Help from AI)\",\n  date: \"March 29, 2024\",\n  author: \"Martin Tomek\",\n  tags: [\"After Effects\", \"ExtendScript\", \"React\", \"Automation\"],\n  content: [{\n    type: 'personal-intro',\n    content: \"You know that feeling when you keep doing the same task over and over? That was me, manually tracking week numbers for deliveries, exporting files with specific naming conventions, and sending the same Discord messages to the same person. One day I thought - what if I could automate all of this? With the help of AI tools, I decided to create a custom After Effects panel that would handle all these tedious tasks automatically.\"\n  }, {\n    type: 'journey-start',\n    content: {\n      title: \"The AI-Powered Beginning ðŸ¤–\",\n      text: \"I had just discovered two amazing tools - Claude AI and Cursor IDE. I was curious if they could help me create something for After Effects. Turns out, they were perfect partners for this journey.\"\n    }\n  }, {\n    type: 'section',\n    title: \"Building the Panel Interface\",\n    content: [{\n      title: \"React + Framer Motion\",\n      description: \"I chose React for the panel interface and added Framer Motion for smooth animations. The combination made the panel feel native to After Effects.\",\n      code: `// Example of our animated panel interface\nconst App = () => {\n  const [isLibraryOpen, setIsLibraryOpen] = useState(false);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      style={{\n        background: '#2D2D2D',\n        color: '#fff'\n      }}\n    >\n      {/* Panel content */}\n    </motion.div>\n  );\n};`\n    }, {\n      title: \"ExtendScript Integration\",\n      description: \"The real magic happens when React meets ExtendScript. This bridge lets our panel communicate directly with After Effects.\",\n      code: `// Importing assets through ExtendScript\nconst handleImportLogo = (logoName) => {\n  const csInterface = new CSInterface();\n  const script = \\`\n    var logoFile = new File(\"/path/to/logo.jpg\");\n    var comp = app.project.activeItem;\n    if (comp && comp instanceof CompItem) {\n      var importedFile = app.project.importFile(new ImportOptions(logoFile));\n      var layer = comp.layers.add(importedFile);\n      layer.name = \"\\${logoName}\";\n    }\n  \\`;\n  csInterface.evalScript(script);\n};`\n    }]\n  }, {\n    type: 'technical-breakdown',\n    title: \"Key Features\",\n    content: {\n      text: \"The panel combines several powerful features:\",\n      features: [{\n        title: \"Asset Library\",\n        description: \"Quick access to frequently used logos and assets with live preview\",\n        icon: \"ðŸŽ¨\"\n      }, {\n        title: \"Week Tracking\",\n        description: \"Automatic week number management for deliveries\",\n        icon: \"ðŸ“…\"\n      }, {\n        title: \"Export Automation\",\n        description: \"One-click export with proper naming conventions\",\n        icon: \"ðŸ“¤\"\n      }, {\n        title: \"Discord Integration\",\n        description: \"Automated notifications upon export completion\",\n        icon: \"ðŸ’¬\"\n      }]\n    }\n  }, {\n    type: 'github-journey',\n    content: {\n      title: \"Version Control with GitHub ðŸ“š\",\n      text: \"One of the best decisions was keeping the project on GitHub from day one. It's not just about version control - it's about having a clear history of how the panel evolved.\",\n      sections: [{\n        title: \"Why GitHub?\",\n        points: [\"Track all changes and feature additions\", \"Easy rollback if something breaks\", \"Branch for new features without breaking the main code\", \"Documentation stays with the code\", \"Other TDs can contribute and suggest improvements\"]\n      }]\n    }\n  }, {\n    type: 'development-timeline',\n    content: {\n      title: \"The Development Journey ðŸ“ˆ\",\n      stages: [{\n        date: \"March 1, 2024\",\n        title: \"Basic Panel Structure\",\n        description: \"Set up React with CEP integration for After Effects\"\n      }, {\n        date: \"March 5, 2024\",\n        title: \"Asset Library\",\n        description: \"Added animated asset library with Framer Motion\"\n      }, {\n        date: \"March 10, 2024\",\n        title: \"Automation Features\",\n        description: \"Implemented week tracking and export automation\"\n      }, {\n        date: \"March 15, 2024\",\n        title: \"Discord Integration\",\n        description: \"Added automated notifications through Discord webhook\"\n      }]\n    }\n  }, {\n    type: 'conclusion',\n    content: {\n      title: \"From Manual to Automatic ðŸš€\",\n      sections: [{\n        text: \"What started as a simple panel has evolved into a crucial part of our daily workflow. The combination of React's flexibility, ExtendScript's power, and AI assistance made it possible to create something that feels like it should have been part of After Effects all along.\",\n        type: \"reflection\"\n      }, {\n        text: \"Key learnings from this project:\",\n        points: [\"React + ExtendScript + Framer Motion is a powerful combination\", \"AI tools can significantly speed up development\", \"Version control is crucial, even for small projects\", \"Automating small tasks adds up to major time savings\", \"The Adobe CEP platform is more flexible than it seems\"],\n        type: \"lessons\"\n      }, {\n        text: \"Want to explore the code or contribute?\",\n        links: [{\n          text: \"View on GitHub\",\n          url: \"https://github.com/Themolx/AE-Production-Panel\",\n          primary: true\n        }],\n        type: \"cta\"\n      }]\n    }\n  }]\n};","map":{"version":3,"names":["aeCustomPanelPost","slug","title","date","author","tags","content","type","text","description","code","features","icon","sections","points","stages","links","url","primary"],"sources":["/Users/martintomek/passive/src/data/blogPosts/aeCustomPanel.js"],"sourcesContent":["export const aeCustomPanelPost = {\n  slug: 'ae-custom-panel',\n  title: \"ðŸŽ¨ Creating a Smart After Effects Panel (With Help from AI)\",\n  date: \"March 29, 2024\",\n  author: \"Martin Tomek\",\n  tags: [\"After Effects\", \"ExtendScript\", \"React\", \"Automation\"],\n  content: [\n    {\n      type: 'personal-intro',\n      content: \"You know that feeling when you keep doing the same task over and over? That was me, manually tracking week numbers for deliveries, exporting files with specific naming conventions, and sending the same Discord messages to the same person. One day I thought - what if I could automate all of this? With the help of AI tools, I decided to create a custom After Effects panel that would handle all these tedious tasks automatically.\"\n    },\n    {\n      type: 'journey-start',\n      content: {\n        title: \"The AI-Powered Beginning ðŸ¤–\",\n        text: \"I had just discovered two amazing tools - Claude AI and Cursor IDE. I was curious if they could help me create something for After Effects. Turns out, they were perfect partners for this journey.\"\n      }\n    },\n    {\n      type: 'section',\n      title: \"Building the Panel Interface\",\n      content: [\n        {\n          title: \"React + Framer Motion\",\n          description: \"I chose React for the panel interface and added Framer Motion for smooth animations. The combination made the panel feel native to After Effects.\",\n          code: `// Example of our animated panel interface\nconst App = () => {\n  const [isLibraryOpen, setIsLibraryOpen] = useState(false);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      style={{\n        background: '#2D2D2D',\n        color: '#fff'\n      }}\n    >\n      {/* Panel content */}\n    </motion.div>\n  );\n};`\n        },\n        {\n          title: \"ExtendScript Integration\",\n          description: \"The real magic happens when React meets ExtendScript. This bridge lets our panel communicate directly with After Effects.\",\n          code: `// Importing assets through ExtendScript\nconst handleImportLogo = (logoName) => {\n  const csInterface = new CSInterface();\n  const script = \\`\n    var logoFile = new File(\"/path/to/logo.jpg\");\n    var comp = app.project.activeItem;\n    if (comp && comp instanceof CompItem) {\n      var importedFile = app.project.importFile(new ImportOptions(logoFile));\n      var layer = comp.layers.add(importedFile);\n      layer.name = \"\\${logoName}\";\n    }\n  \\`;\n  csInterface.evalScript(script);\n};`\n        }\n      ]\n    },\n    {\n      type: 'technical-breakdown',\n      title: \"Key Features\",\n      content: {\n        text: \"The panel combines several powerful features:\",\n        features: [\n          {\n            title: \"Asset Library\",\n            description: \"Quick access to frequently used logos and assets with live preview\",\n            icon: \"ðŸŽ¨\"\n          },\n          {\n            title: \"Week Tracking\",\n            description: \"Automatic week number management for deliveries\",\n            icon: \"ðŸ“…\"\n          },\n          {\n            title: \"Export Automation\",\n            description: \"One-click export with proper naming conventions\",\n            icon: \"ðŸ“¤\"\n          },\n          {\n            title: \"Discord Integration\",\n            description: \"Automated notifications upon export completion\",\n            icon: \"ðŸ’¬\"\n          }\n        ]\n      }\n    },\n    {\n      type: 'github-journey',\n      content: {\n        title: \"Version Control with GitHub ðŸ“š\",\n        text: \"One of the best decisions was keeping the project on GitHub from day one. It's not just about version control - it's about having a clear history of how the panel evolved.\",\n        sections: [\n          {\n            title: \"Why GitHub?\",\n            points: [\n              \"Track all changes and feature additions\",\n              \"Easy rollback if something breaks\",\n              \"Branch for new features without breaking the main code\",\n              \"Documentation stays with the code\",\n              \"Other TDs can contribute and suggest improvements\"\n            ]\n          }\n        ]\n      }\n    },\n    {\n      type: 'development-timeline',\n      content: {\n        title: \"The Development Journey ðŸ“ˆ\",\n        stages: [\n          {\n            date: \"March 1, 2024\",\n            title: \"Basic Panel Structure\",\n            description: \"Set up React with CEP integration for After Effects\"\n          },\n          {\n            date: \"March 5, 2024\",\n            title: \"Asset Library\",\n            description: \"Added animated asset library with Framer Motion\"\n          },\n          {\n            date: \"March 10, 2024\",\n            title: \"Automation Features\",\n            description: \"Implemented week tracking and export automation\"\n          },\n          {\n            date: \"March 15, 2024\",\n            title: \"Discord Integration\",\n            description: \"Added automated notifications through Discord webhook\"\n          }\n        ]\n      }\n    },\n    {\n      type: 'conclusion',\n      content: {\n        title: \"From Manual to Automatic ðŸš€\",\n        sections: [\n          {\n            text: \"What started as a simple panel has evolved into a crucial part of our daily workflow. The combination of React's flexibility, ExtendScript's power, and AI assistance made it possible to create something that feels like it should have been part of After Effects all along.\",\n            type: \"reflection\"\n          },\n          {\n            text: \"Key learnings from this project:\",\n            points: [\n              \"React + ExtendScript + Framer Motion is a powerful combination\",\n              \"AI tools can significantly speed up development\",\n              \"Version control is crucial, even for small projects\",\n              \"Automating small tasks adds up to major time savings\",\n              \"The Adobe CEP platform is more flexible than it seems\"\n            ],\n            type: \"lessons\"\n          },\n          {\n            text: \"Want to explore the code or contribute?\",\n            links: [\n              {\n                text: \"View on GitHub\",\n                url: \"https://github.com/Themolx/AE-Production-Panel\",\n                primary: true\n              }\n            ],\n            type: \"cta\"\n          }\n        ]\n      }\n    }\n  ]\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}